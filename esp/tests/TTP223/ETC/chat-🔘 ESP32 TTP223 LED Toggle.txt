### USER
led on off
touch кнопка TTP223 ESP32-C3 ESP-IDF  
TTP223 какой режим?  
при касании включать / выключать led  
с кнопкой работать по прерыванию  
LED_PIN GPIO8  
BTN_PIN GPIO5

### ASSISTANT
Ниже я предоставлю полный пример кода на C для ESP-IDF (ESP32-C3), который реализует вашу задачу: включение/выключение (toggle) LED при касании сенсорной кнопки TTP223. LED подключен к GPIO8, кнопка TTP223 — к GPIO5. Мы будем работать с кнопкой по прерыванию (interrupt), чтобы реагировать на касание эффективно.

### Важно о TTP223: какой режим использовать?
TTP223 — это сенсорный модуль касания с несколькими режимами работы, которые настраиваются перемычками (jumper) на плате модуля (A, B, TOG). Вот ключевые режимы и рекомендация для вашей задачи:

- **Стандартный режим (по умолчанию, без перемычек)**: 
  - **Momentary (не toggle)**: При касании вывод (SIG) становится высоким (HIGH), при отпускании — низким (LOW). Активный уровень — высокий (Active High).
  - Это импульсный режим: сигнал держится, пока вы держите палец.
  - **Для вашей задачи**: Подходит, но в коде мы будем реагировать только на **восходящий фронт (rising edge)** сигнала (начало касания), чтобы toggle LED один раз за касание. Это предотвратит множественные переключения, если палец держится долго.

- **Toggle-режим (рекомендую для вашей задачи)**:
  - Установите перемычку на пине **TOG** (если она есть на вашем модуле). Это сделает TTP223 "триггерным": каждое касание будет переключать состояние выхода (HIGH/LOW) самостоятельно.
  - Активный уровень: Обычно Active High (перемычка AHLB не установлена), но можно изменить на Active Low (установить перемычку на AHLB).
  - **Почему рекомендую**: TTP223 сам будет toggle-ать сигнал при каждом касании, и в коде мы просто прочитаем состояние и применим его к LED. Но если модуль не поддерживает (или вы не хотите паять/менять), используйте стандартный режим — код ниже адаптирован для него.

- **Другие настройки**:
  - **Active Low**: Установите перемычку на AHLB — сигнал инвертируется (LOW при касании).
  - **Open Drain**: Редко нужно, но если сигнал слабый, проверьте.
  - **Питание**: Подключите TTP223 к 3.3V (ESP32-C3) и GND. Вывод SIG — к GPIO5.

**Моя рекомендация**: Начните со **стандартного momentary-режима (без перемычек)**. Код ниже написан для него (реагирует на rising edge). Если хотите toggle в самом TTP223, измените код соответственно (укажу в комментариях). Протестируйте модуль с мультиметром: коснитесь — проверьте уровень на SIG.

Если ваш TTP223 в другом режиме, напишите детали — скорректирую код.

### Требования для сборки
- ESP-IDF v4.4 или новее (установите по инструкции Espressif).
- В `CMakeLists.txt` добавьте `REQUIRES driver`.
- Компиляция: `idf.py build flash monitor`.

### Полный код (app_main.c)
```c
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/event_groups.h"
#include "driver/gpio.h"
#include "esp_log.h"

// Определения пинов
#define LED_PIN GPIO_NUM_8  // LED на GPIO8
#define BTN_PIN GPIO_NUM_5  // TTP223 SIG на GPIO5

// Тег для логов
static const char *TAG = "TTP223_LED";

// Глобальная переменная для состояния LED (toggle)
static bool led_state = false;

// Функция обработчика прерывания (ISR)
static void IRAM_ATTR gpio_isr_handler(void *arg) {
    // Toggle состояния LED (только на rising edge это сработает)
    led_state = !led_state;
    gpio_set_level(LED_PIN, led_state);
    
    // Опционально: можно добавить debounce (задержку), но TTP223 обычно чистый
    // ets_delay_us(100000); // 100ms debounce, если нужно
}

// Основная функция
void app_main(void) {
    // Настройка LED как выход
    gpio_config_t io_conf = {
        .pin_bit_mask = (1ULL << LED_PIN),
        .mode = GPIO_MODE_OUTPUT,
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .pull_down_en = GPIO_PULLDOWN_DISABLE,
        .intr_type = GPIO_INTR_DISABLE
    };
    gpio_config(&io_conf);
    gpio_set_level(LED_PIN, 0);  // LED изначально выключен

    // Настройка кнопки TTP223 как вход с прерыванием
    io_conf.pin_bit_mask = (1ULL << BTN_PIN);
    io_conf.mode = GPIO_MODE_INPUT;
    io_conf.pull_up_en = GPIO_PULLUP_ENABLE;    // Внутренняя подтяжка вверх (если TTP223 Active High)
    io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE;
    io_conf.intr_type = GPIO_INTR_POSEDGE;      // Прерывание на восходящий фронт (rising edge) — начало касания
    gpio_config(&io_conf);

    // Установка сервиса прерываний
    gpio_install_isr_service(0);  // Флаги по умолчанию

    // Добавление обработчика прерывания для пина кнопки
    gpio_isr_handler_add(BTN_PIN, gpio_isr_handler, NULL);

    ESP_LOGI(TAG, "Система готова. Касайтесь TTP223 для toggle LED.");

    // Бесконечный цикл (можно добавить логи или другие задачи)
    while (1) {
        vTaskDelay(pdMS_TO_TICKS(1000));  // Задержка 1 сек, чтобы не нагружать CPU
        ESP_LOGI(TAG, "LED state: %d", led_state);
    }
}
```

### Как это работает?
1. **Инициализация**:
   - GPIO8: Выход для LED, изначально выключен.
   - GPIO5: Вход с внутренней подтяжкой вверх (pull-up), прерывание на **rising edge** (когда сигнал переходит из LOW в HIGH — начало касания в стандартном режиме TTP223).

2. **Прерывание**:
   - Когда вы касаетесь TTP223 (в momentary-режиме), SIG переходит в HIGH — срабатывает ISR.
   - В ISR мы toggle-аем переменную `led_state` и применяем её к LED.
   - Это обеспечивает включение/выключение LED **один раз за касание**, даже если палец держится.

3. **Адаптация для toggle-режима TTP223**:
   - Если TTP223 в toggle-режиме (перемычка TOG), измените тип прерывания на `GPIO_INTR_ANYEDGE` (любой фронт) и в ISR читайте состояние пина:
     ```c
     io_conf.intr_type = GPIO_INTR_ANYEDGE;  // Прерывание на любой фронт

     // В ISR:
     static void IRAM_ATTR gpio_isr_handler(void *arg) {
         led_state = gpio_get_level(BTN_PIN);  // Читать состояние от TTP223 и применить к LED
         gpio_set_level(LED_PIN, led_state);
     }
     ```
   - Это сделает LED "зеркалом" состояния TTP223.

4. **Debounce (антидребезг)**:
   - TTP223 обычно не дребезжит, но если заметите множественные срабатывания, добавьте задержку в ISR (как в комментарии) или используйте FreeRTOS-очередь для обработки в задаче.

5. **Тестирование**:
   - Загрузите код: `idf.py -p /dev/ttyUSB0 flash monitor` (укажите ваш порт).
   - Коснитесь TTP223 — LED должен toggle (вкл/выкл).
   - В мониторе увидите логи состояния.

Если возникнут ошибки (например, прерывание не срабатывает), проверьте:
- Подключение: TTP223 VCC=3.3V, GND, SIG=GPIO5.
- Уровень сигнала: Используйте осциллограф или мультиметр.
- Если TTP223 Active Low — измените pull-up на pull-down и intr_type на GPIO_INTR_NEGEDGE.

Если нужно доработать (например, добавить Wi-Fi или другие функции), напишите!